import pandas as pd
import numpy as np
import math
import matplotlib as plt
import time
from datetime import date

def EquityOnly(df, df1, df2, Start):  #######
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    df2 = df2.ix[df2.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result[j][i] = df[j][i] / df2['A'][i] * df1['A'][i]
    return result

def OutlookPortAdj(df, df1, maxequityposition):
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df1['A'][i] == 1:
            result['A'][i] = maxequityposition
            if df['A'][i] > maxequityposition:
                result['A'][i] = maxequityposition
            else:
                result['A'][i] = df['A'][i]
        else:
            result['A'][i] = df['A'][i]
    return result

def minposition(Outlook_2opt, minequityweight):
    result = Outlook_2opt.copy()
    for i in range(0,result.shape[0]):
        if Outlook_2opt['A'][i] < minequityweight:
            result['A'][i] = minequityweight
        else:
            result['A'][i] = Outlook_2opt['A'][i]
    return result

def DM(df):
    result = pd.DataFrame(index=df.index, columns=['DM'])
    # result.rename(columns={'SPY US equity': 'DM'}, inplace=True)
    # indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        # for j in indx:
        result['DM'][i] = df['SPY US equity'][i] + df['QQQ US equity'][i] + df['DXJ US equity'][i] + df['EWG US equity'][i] + df['EWA US equity'][i] + df['EWC US equity'][i] + df['EWU US equity'][i] + df['EWP US equity'][i] + df['EWI US equity'][i] + df['EWL US equity'][i] + df['EWQ US equity'][i] + df['EWS US equity'][i] + df['HEDJ US equity'][i]
    # result.rename(columns={'SPY US equity': 'DM'}, inplace=True)
    return result

def EM(df,df1):
    result = pd.DataFrame(index=df.index, columns=['EM'])
    # indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        # for j in indx:
        result['EM'][i] = df['sum'][i] - df1['DM'][i]
    return result

def Bullsoft_ind(df, updown, outlook, agg, DMSum, EMSum, EMW, Start, Word):
    df = df.ix[df.index.get_loc(Start):]
    df1 = pd.DataFrame(np.zeros(len(df.index)), index=df.index, columns=['ACWI US equity'])
    df2 = pd.DataFrame(np.zeros(len(df.index)),index=df.index, columns=['VT US equity'])
    updown = updown.ix[updown.index.get_loc(Start):]
    outlook = outlook.ix[outlook.index.get_loc(Start):]
    result = pd.concat([df,df1,df2], axis=1, join_axes=[df.index])
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result['EEM US equity'][i] = df['EEM US equity'][i] * (outlook[Word][i] - agg) /outlook[Word][i]
            result['EWZ US equity'][i] = 0
            result['ERUS US equity'][i] = 0
            result['EWY US equity'][i] = df['EWY US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWW US equity'][i] = 0
            result['EWT US equity'][i] = df['EWT US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['INDA US equity'][i] = df['INDA US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EZA US equity'][i] = 0
            result['FXI US equity'][i] = df['FXI US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EIDO US equity'][i] = 0
            result['EWM US equity'][i] = 0
            # result['ASHR US equity'][i] = df['ASHR US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['THD US equity'][i] = df['THD US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['ECH US equity'][i] = 0
            result['ACWI US equity'][i] = agg * 0.5
            result['VT US equity'][i] = agg * 0.5
            result['SPY US equity'][i] = df['SPY US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['QQQ US equity'][i] = df['QQQ US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['DXJ US equity'][i] = df['DXJ US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWG US equity'][i] = df['EWG US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWH US equity'][i] = df['EWH US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWA US equity'][i] = df['EWA US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWC US equity'][i] = df['EWC US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWU US equity'][i] = df['EWU US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWP US equity'][i] = df['EWP US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWI US equity'][i] = df['EWI US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWL US equity'][i] = df['EWL US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWQ US equity'][i] = df['EWQ US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['EWS US equity'][i] = df['EWS US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]
            result['HEDJ US equity'][i] = df['HEDJ US equity'][i] * (outlook[Word][i] - agg) / outlook[Word][i]

    return result

def Volconst(df, Start):  #######
    df = df.ix[df.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        result['EWZ US equity'][i] = 0
        result['ERUS US equity'][i] = 0
        result['EWW US equity'][i] = 0
        result['EZA US equity'][i] = 0
        result['EIDO US equity'][i] = 0
        result['EWM US equity'][i] = 0
        result['ECH US equity'][i] = 0
        result['THD US equity'][i] = 0
    return result

def Merge_perform(ETF, UI):
    result = ETF.copy()
    for i in range(result.shape[0]):
        for j in range(result.shape[1]):
            if np.isnan(ETF.iat[i, j]):
                result.iat[i, j] = UI.iat[i, j]
    return result

def Merge_FedRate(df):
    result = df.copy()
    for i in range(result.shape[0]):
        for j in range(result.shape[1]):
            if np.isnan(df.iat[i, j]):
                result.iat[i, j] = result.iat[i-1, j]
            else:
                result.iat[i, j] = result.iat[i, j]
    return result

def Merge_Index(mat_data):
    result = mat_data.copy()
    for i in range(result.shape[1]):
        result.iat[0, i] = 1000

    for i in range(0, result.shape[1]):
        for j in range(1, result.shape[0]):
            result.iat[j, i] = (mat_data.iat[j, i] + 1) * result.iat[j-1, i]
    return result

def MA(mat_data, k):
    result = mat_data.copy()
    for i in range(result.shape[1]):
        mean = mat_data.iloc[:, i].rolling(window=k).mean()
        for j in range(result.shape[0]):
            result.iat[j, i] = (mat_data.iat[j, i]) / mean.iat[j]
    return result

def STDEVF(mat_data, k):
    result = mat_data.copy()
    for i in range(result.shape[1]):
        result.iloc[:,i] = mat_data.iloc[:, i].rolling(window=k).std()
    return result



def RANK(mat_data):
    result = mat_data.rank(1)
    for i in range(result.shape[0]):
        for j in range(result.shape[1]):
            if mat_data.iat[i, j] < 0:
                result.iat[i, j] = 1
    return result

def Signal_Summary(mat_data1,mat_data2, k, m):
    result = mat_data1.rank(1)
    for i in range(result.shape[0]):
        for j in range(result.shape[1]):
            result.iat[i, j] = (mat_data1.iat[i, j] * k + mat_data2.iat[i, j] *(1-k))/m
    return result

def SelectionA(mat_data,k):
    result = mat_data.copy()
    for i in range(result.shape[0]):
        for j in range(result.shape[1]):
            if mat_data.iat[i, j] > k:
                result.iat[i, j] = mat_data.iat[i, j]
            else:
                result.iat[i, j] = 0
    return result

def Unirank(mat_data):
    result = mat_data.rank(1,ascending=False)
    for i in range(result.shape[0]):
        for j in range(result.shape[1]):
            if mat_data.iat[i, j] == 0:
                result.iat[i, j] = 100

    return result

def PreWeightA(mat_data,A,B,C,D,E,F):
    result = mat_data.copy()
    indx = list(mat_data.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if mat_data[j][i] == 1:
                result[j][i] = A
            elif mat_data[j][i] == 2:
                result[j][i] = B
            elif mat_data[j][i] == 3:
                result[j][i] = C
            elif mat_data[j][i] == 4:
                result[j][i] = D
            elif mat_data[j][i] == 5:
                result[j][i] = E
            elif mat_data[j][i] == 6:
                result[j][i] = F
            elif mat_data[j][i] == 7:
                result[j][i] = F
            elif mat_data[j][i] == 8:
                result[j][i] = F
            elif mat_data[j][i] == 9:
                result[j][i] = F
            else:
                result[j][i] = 0
    return result

def RebalSignal(df):
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df['RebalSig'][i] == df['RebalSig'][i-1]:
            result['RebalSig'][i] = 0
        else:
            result['RebalSig'][i] = 1
    return result

def RebalSignal_Risk(df, df1, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df1['A'][i - 1] == 0 and df1['A'][i - 2] == 1:
            result['RebalSig'][i] = 1
        else:
            result['RebalSig'][i] = df['RebalSig'][i]
    return result

def Duration(df, df1, df2, Start): #######
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    df2 = df2.ix[df2.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df1['Signal'][i] == 1 and df2['A'][i] >= 0.40:
                result['AGG US equity'][i] = 0.22
                result['SPAB US equity'][i] = 0.17
                result['IEI US equity'][i] = 0.07
                result['IEF US equity'][i] = 0
                result['TLH US equity'][i] = 0
                result['TLT US equity'][i] = 0
                result['EDV US equity'][i] = 0
                result['MBG US equity'][i] = 0.07
                result['CLY US equity'][i] = 0
                result['LQD US equity'][i] = 0.05
                result['BKLN US equity'][i] = 0.05
                result['JNK US equity'][i] = 0.04
                result['HYLD US equity'][i] = 0.04
                result['HYG US equity'][i] = 0.03
                result['HYS US equity'][i] = 0.05
                result['EMB US equity'][i] = 0

            elif df1['Signal'][i] == 1 and df2['A'][i] < 0.40:
                result['AGG US equity'][i] = 0.32
                result['SPAB US equity'][i] = 0.27
                result['IEI US equity'][i] = 0.07
                result['IEF US equity'][i] = 0.06
                result['TLH US equity'][i] = 0
                result['TLT US equity'][i] = 0
                result['EDV US equity'][i] = 0
                result['MBG US equity'][i] = 0.07
                result['CLY US equity'][i] = 0
                result['LQD US equity'][i] = 0.05
                result['BKLN US equity'][i] = 0
                result['JNK US equity'][i] = 0
                result['HYLD US equity'][i] = 0
                result['HYG US equity'][i] = 0
                result['HYS US equity'][i] = 0.05
                result['EMB US equity'][i] = 0

            elif df1['Signal'][i] == 0 and df2['A'][i] < 0.40:
                result['AGG US equity'][i] = 0.32
                result['SPAB US equity'][i] = 0.27
                result['IEI US equity'][i] = 0.1
                result['IEF US equity'][i] = 0.08
                result['TLH US equity'][i] = 0.06
                result['TLT US equity'][i] = 0.05
                result['EDV US equity'][i] = 0.07
                result['MBG US equity'][i] = 0.07
                result['CLY US equity'][i] = 0
                result['LQD US equity'][i] = 0.05
                result['BKLN US equity'][i] = 0
                result['JNK US equity'][i] = 0
                result['HYLD US equity'][i] = 0
                result['HYG US equity'][i] = 0
                result['HYS US equity'][i] = 0.05
                result['EMB US equity'][i] = 0

            elif df1['Signal'][i] == 0 and df2['A'][i] >= 0.40:
                result['AGG US equity'][i] = 0.32
                result['SPAB US equity'][i] = 0.27
                result['IEI US equity'][i] = 0.1
                result['IEF US equity'][i] = 0.08
                result['TLH US equity'][i] = 0.06
                result['TLT US equity'][i] = 0.05
                result['EDV US equity'][i] = 0.07
                result['MBG US equity'][i] = 0.07
                result['CLY US equity'][i] = 0.03
                result['LQD US equity'][i] = 0.04
                result['BKLN US equity'][i] = 0.04
                result['JNK US equity'][i] = 0.06
                result['HYLD US equity'][i] = 0.05
                result['HYG US equity'][i] = 0.04
                result['HYS US equity'][i] = 0.04
                result['EMB US equity'][i] = 0

    return result

def CreditAdj(df, k, Start):
    df = df.ix[df.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df['A'][i] == 0:
                result['A'][i] = 0
            else:
                result['A'][i] = df['A'][i] - (k / 2)
    return result

def AggGovAdj(df,df1, df2, A, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    df2 = df2.ix[df2.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df['A'][i] == 0:
            result['A'][i] = 1 - df['A'][i] - df1['A'][i] - df2['EMB US equity'][i] - A
        else:
            result['A'][i] = 1 - df['A'][i] - df1['A'][i] - df2['EMB US equity'][i] - (A / 2)

    return result

def EquityAdj(df,df1,k,p, A, B, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        if (df1['A'][i] > 0 and df['A'][i] > k and k > B) :
            result['A'][i] = B - df1['A'][i] - (A / 2)
        elif (df1['A'][i] > 0 and df['A'][i] > k and k < B) :
            result['A'][i] = k - (A / 2)
        elif (df1['A'][i] > 0 and df['A'][i] > p and p > B) :
            result['A'][i] = B - df1['A'][i] - (A / 2)
        elif (df1['A'][i] > 0 and df['A'][i] > p and p < B):
            result['A'][i] = p - (A / 2)
        elif (df1['A'][i] == 0 and df['A'][i] > k and k > B):
            result['A'][i] = B - (A / 2)
        elif (df1['A'][i] == 0 and df['A'][i] > k and k < B):
            result['A'][i] = k - (A / 2)
        elif (df1['A'][i] == 0 and df['A'][i] > p and p > B):
            result['A'][i] = B - (A / 2)
        elif (df1['A'][i] == 0 and df['A'][i] > p and p < B):
            result['A'][i] = p - (A / 2)
        else:
            result['A'][i] = df['A'][i] - (A / 2)
    return result

def EquityAdj2(df,df1, df2, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    df2 = df2.ix[df2.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result[j][i] = df[j][i] / df1['A'][i] * df2['A'][i]
    return result

def EquityAdj3(df,df1, df2):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result[j][i] = df[j][i] / df1['A'][i] * df2['A'][i]
    return result

def BondAdj(df,df1,k):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df1['A'][i] > k:
                result[j][i] = df[j][i] / df1['A'][i] * k
            else:
                result[j][i] = df[j][i]
    return result

def EquityFinalPre(df, df1, df2):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result[j][i] =(df[j][i]/ df1['A'][i]) * df2['A'][i]

    return result

def EquityFinal(df):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df[j][i] > 0.75:
                result[j][i] = df[j][i] - 0.14 - 0.02
            else:
                result[j][i] = df[j][i] - 0.02

    return result

def BondFinal(df, df1, k):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df1['A'][i] == 0:
                result[j][i] = 0
            else:
                result[j][i] =(df[j][i]/ df1['A'][i]) * k
    return result

def BondOut(df, df1):
    result = df.copy()
    for i in range(0, result.shape[0]):
        result['A'][i] = 0.96 - df['A'][i] - df1['sum'][i]

    return result

def BondOut_Add(df, df1, df2, Start):  ######
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    df2 = df2.ix[df2.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df1['Signal'][i] == 1 and df['A'][i] >= 0.95:
            # result['A'][i] = 0.95
            result['A'][i] = df['A'][i]
        else:
            result['A'][i] = df['A'][i]

    return result

def RiskOnOff(df, df1, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result[j][i] = df[j][i] * df1['A'][i]
    return result


def CashMng(df):
    result = df.copy()
    for i in range(0, result.shape[0]):
           result['RebalSig'][i] = df['RebalSig'][i] * 0

    return result

def CashAdj_Add(df, df1, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df1['RebalSig'][i] == 1:
            result['A'][i] = df['A'][i]
        else:
            result['A'][i] = result['A'][i - 1]
    return result

def WeightAdj(df):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result[j][0] = 0
            result[j][i] = df[j][i-1]
    return result

def PortTrD(df):
    result = df.copy()
    for i in range(result.shape[0]):
        for j in range(result.shape[1]):
            if np.isnan(df.iat[i, j]):
                result.iat[i, j] = df.iat[i - 1, j]
    return result

def NAV(df, df1, df2):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df2['RebalSig'][i] == 1:
                result[j][i] = df[j][i] * (1+ df1[j][i])

            else:
                result[j][i] = result[j][i-1] * (1 + df1[j][i])
    return result

def PortPerform(df, df1, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df1['RebalSig'][i] == 1:
                result[j][i] = df[j][i] - 1

            else:
                result[j][i] = df[j][i] / df[j][i - 1] -1
    return result

def TRexpWeight(df, df1):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            if df1['RebalSig'][i] == 1:
                result[j][i] = df[j][i]

            else:
                result[j][i] = result[j][i - 1]
    return result

def TRexpWeight2(df):
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result[j][i] = df[j][i] - df[j][i - 1]

    return result

def PortNAV(df, df1):
    result = df.copy()
    for i in range(0, result.shape[0]):
        result['A'][0] = 1000
        result['A'][i] = (result['A'][i - 1] * (1 + df['A'][i]))* df1['A'][i]

    return result

def OrderSheet(df,df1, A):
    #if df1.iat[0, 0] == 0:
    df.to_excel(A)

def Riskscoring(df):
    result = df.copy()
    for i in range(0, result.shape[0]):
        result['SPY US equity'][i] = 4
        result['DXJ US equity'][i] = 4
        result['EWG US equity'][i] = 4
        result['EWH US equity'][i] = 4
        result['EWA US equity'][i] = 4
        result['EWC US equity'][i] = 4
        result['EWU US equity'][i] = 4
        result['EWP US equity'][i] = 4
        result['EWI US equity'][i] = 4
        result['EWL US equity'][i] = 4
        result['EWQ US equity'][i] = 4
        result['EWS US equity'][i] = 4
        result['EEM US equity'][i] = 4
        result['EWZ US equity'][i] = 4
        result['ERUS US equity'][i] = 4
        result['EWY US equity'][i] = 4
        result['EWW US equity'][i] = 4
        result['EWT US equity'][i] = 4
        result['INDA US equity'][i] = 4
        result['EZA US equity'][i] = 4
        result['FXI US equity'][i] = 4
        result['EIDO US equity'][i] = 4
        result['EWM US equity'][i] = 4
        result['TUR US equity'][i] = 4
        result['HEDJ US equity'][i] = 4
        result['THD US equity'][i] = 4
        result['ECH US equity'][i] = 4
        result['AGG US equity'][i] = 2
        result['BNDS US equity'][i] = 2
        result['IEI US equity'][i] = 1
        result['IEF US equity'][i] = 1
        result['TLH US equity'][i] = 1
        result['TLT US equity'][i] = 1
        result['EDV US equity'][i] = 1
        result['MBG US equity'][i] = 2
        result['CLY US equity'][i] = 2
        result['LQD US equity'][i] = 2
        result['BKLN US equity'][i] = 3
        result['JNK US equity'][i] = 3
        result['HYLD US equity'][i] = 3
        result['HYG US equity'][i] = 3
        result['HYS US equity'][i] = 3
        result['EMB US equity'][i] = 3
        result['GLD US equity'][i] = 5
        result['USO US equity'][i] = 5
        result['SLV US equity'][i] = 5
        result['DBB US equity'][i] = 5
        result['DBC US equity'][i] = 5
        result['DBA US equity'][i] = 5

    return result

def Weight_score(df, df1):
    result = df.copy()
    for i in range(0, result.shape[0]):
        for j in range(0, result.shape[1]):
            result.iat[i, j] = (df.iat[i, j]) * (df1.iat[i, j])
    return result

def PortExport(df, df1, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(1, result.shape[0]):
        for j in indx:
            if df1['RebalSig'][i] == 1:
                result[j][i] = df[j][i]

            else:
                result[j][i] = result[j][i - 1]
    return result

def CurrencyVol_sortout(df, Start):  ######
    df = df.ix[df.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result['EZA US equity'][i] = 0
            result['TUR US equity'][i] = 0
            result['EWM US equity'][i] = 0
            result['THD US equity'][i] = 0
            result['ECH US equity'][i] = 0
            result['EWW US equity'][i] = 0
            result['ERUS US equity'][i] = 0
    return result





def EquityAdj_Tune(df, Start):  #######
    df = df.ix[df.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df['A'][i] < 0:
            result['A'][i] = 0
        else:
            result['A'][i] = df['A'][i]
    return result

def Mkt_Neut(df, df1, df2, Start):
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    df2 = df2.ix[df2.index.get_loc(Start):]
    result = df.copy()
    indx = list(df.columns.values)
    for i in range(0, result.shape[0]):
        for j in indx:
            result['IEF US equity'][i] = df['IEF US equity'][i] * df1['IEF US equity'][i]
            result['TLT US equity'][i] = df['TLT US equity'][i] * df1['TLT US equity'][i]
            result['EDV US equity'][i] = df['EDV US equity'][i] * df1['EDV US equity'][i]
            result['IEI US equity'][i] = df['IEI US equity'][i] * df1['IEI US equity'][i]
            result['TLH US equity'][i] = df['TLH US equity'][i] * df1['TLH US equity'][i]

            result['SPY US equity'][i] = df['SPY US equity'][i] * 1
            result['DXJ US equity'][i] = df['DXJ US equity'][i] * 1
            result['HEDJ US equity'][i] = df['HEDJ US equity'][i] * 1
            result['EWL US equity'][i] = df['EWL US equity'][i] * 1
            result['EWA US equity'][i] = df['EWA US equity'][i] * 1
    return result

def Rate_Risk(df, df1, df2, Start):  #######
    df = df.ix[df.index.get_loc(Start):]
    df1 = df1.ix[df1.index.get_loc(Start):]
    df2 = df2.ix[df2.index.get_loc(Start):]
    result = df.copy()
    for i in range(0, result.shape[0]):
        if df1['Signal'][i] == 1 and df2['A'][i] == 0:
            result['A'][i] = 0.4
        elif df1['Signal'][i] == 1 and df2['A'][i] == 1:
            if df['A'][i] + 0.2 > 0.8:
                result['A'][i] = 0.75
            else:
                result['A'][i] = df['A'][i] + 0.2
        else:
            result['A'][i] = df['A'][i]
    return result

# def US_Advisory():

Trading_Expenses = 0.0015
Today = date.today()
WeightDate = Today.isoformat()

Const_Comm = 0.15
Const_Equity1 = 1
Const_Equity2 = 1
Const_HY = 1
Const_CorpB = 1

minequityweight = 0.35 ####
maxequityweight = 0.65 ####

Const_Equity3 = 1
Const_Cash = 0.04

input_file_ETF = 'Z://ResearchData//Update//System//Price_Universe_United.xlsx'   #####
# input_file_UI = 'Z://ResearchData//Update//System//Price_Universe_UI.xlsx'   ######
input_Bond ='Z://QBI//ResearchData//Global_Study//MarketNeutral//PORT.xlsm'
input_file_FedRate = 'Z://QBI//ResearchData//Global_Study//BondDuration//FedRateSignal.xlsx'
input_Equity ='Z://QBI//ResearchData//Global_Study//Short_Equity//EquityShort_Group.xlsm'
input_file_timeseries = 'Z://ResearchData//Update//System//timeseries.xlsx'
input_file_timeseries2 = 'Z://ResearchData//Update//System//timeseries2.xlsx'
data_sheet_ETF = 'ETFP' #####
data_sheet_UI = 'UIP'  #####
data_sheet_Bond = 'Export'
data_sheet_Equity = 'Export'
data_sheet_Equity_Exp = 'Export_Exp'
data_sheet_Bond_Exp = 'Export_Exp'
data_sheet_timeseries = 'timeseries'
data_sheet_FedRate = 'RateS'

timeseries = pd.read_excel(input_file_timeseries, data_sheet_timeseries)
timeseries2 = pd.read_excel(input_file_timeseries2, data_sheet_timeseries)
ETF_PriceB_P = pd.read_excel(input_file_ETF, data_sheet_ETF)  ######
UI_PriceB_P = pd.read_excel(input_file_ETF, data_sheet_UI)  #####
Signal_Bond_Raw = pd.read_excel(input_Bond, data_sheet_Bond)
Signal_Bond_Raw_exp = pd.read_excel(input_Bond, data_sheet_Bond_Exp)
Signal_Equity_Raw = pd.read_excel(input_Equity, data_sheet_Equity)
Signal_Equity_Raw_exp = pd.read_excel(input_Equity, data_sheet_Equity_Exp)
FedRate = pd.read_excel(input_file_FedRate, data_sheet_FedRate)

ETF_PriceB = ETF_PriceB_P[['SPY US equity', 'QQQ US equity', 'DXJ US equity', 'EWG US equity', 'EWH US equity', 'EWA US equity', 'EWC US equity', 'EWU US equity', 'EWP US equity', 'EWI US equity', 'EWL US equity', 'EWQ US equity', 'EWS US equity', 'EEM US equity', 'EWZ US equity', 'ERUS US equity', 'EWY US equity', 'EWW US equity', 'EWT US equity', 'INDA US equity', 'EZA US equity', 'FXI US equity', 'EIDO US equity', 'EWM US equity', 'TUR US equity', 'HEDJ US equity', 'THD US equity', 'ECH US equity', 'ACWI US equity',	'VT US equity', 'AGG US equity', 'SPAB US equity', 'IEI US equity', 'IEF US equity', 'TLH US equity', 'TLT US equity', 'EDV US equity', 'MBG US equity', 'CLY US equity', 'LQD US equity', 'JNK US equity', 'HYG US equity', 'HYS US equity', 'HYLD US equity', 'BKLN US equity', 'EMB US equity', 'GLD US equity', 'USO US equity', 'SLV US equity', 'DBB US equity', 'DBC US equity', 'DBA US equity', 'IYR US equity', 'VNQ US equity']]
UI_PriceB = UI_PriceB_P[['SPY US equity', 'QQQ US equity', 'DXJ US equity', 'EWG US equity', 'EWH US equity', 'EWA US equity', 'EWC US equity', 'EWU US equity', 'EWP US equity', 'EWI US equity', 'EWL US equity', 'EWQ US equity', 'EWS US equity', 'EEM US equity', 'EWZ US equity', 'ERUS US equity', 'EWY US equity', 'EWW US equity', 'EWT US equity', 'INDA US equity', 'EZA US equity', 'FXI US equity', 'EIDO US equity', 'EWM US equity', 'TUR US equity', 'HEDJ US equity', 'THD US equity', 'ECH US equity', 'ACWI US equity',	'VT US equity', 'AGG US equity', 'SPAB US equity', 'IEI US equity', 'IEF US equity', 'TLH US equity', 'TLT US equity', 'EDV US equity', 'MBG US equity', 'CLY US equity', 'LQD US equity', 'JNK US equity', 'HYG US equity', 'HYS US equity', 'HYLD US equity', 'BKLN US equity', 'EMB US equity', 'GLD US equity', 'USO US equity', 'SLV US equity', 'DBB US equity', 'DBC US equity', 'DBA US equity', 'IYR US equity', 'VNQ US equity']]


index_timeseries2 = timeseries.ix[timeseries.index.get_loc('2007-01-31'):]
Signal_Bond = Signal_Bond_Raw.ix[Signal_Bond_Raw.index.get_loc('2007-01-31'):]
Signal_Bond_Exp = Signal_Bond_Raw_exp.ix[Signal_Bond_Raw_exp.index.get_loc('2007-01-31'):]
Signal_Equity = Signal_Equity_Raw.ix[Signal_Equity_Raw.index.get_loc('2007-01-31'):]
Signal_Equity_Exp = Signal_Equity_Raw_exp.ix[Signal_Equity_Raw_exp.index.get_loc('2007-01-31'):]


import sys
sys.path.insert(0, "D://QBI//System//SingStr_Beta")
import Outlook_Equity as OutEquity
import Outlook_USA as OutUSA
import Outlook_JPY as OutJPY
import Outlook_EUR as OutEUR
import Outlook_CHF as OutCHF
import Outlook_AUD as OutAUD
import Outlook_EM as OutEM
import CommdityStr as RelStr


Outlook1 = OutEquity.Allocation_Daily()
Outlook_2opt = Outlook1.ix[Outlook1.index.get_loc('2007-01-31'):]

Outlook_USA1 = OutUSA.SigExp()
Outlook_JPY1 = OutJPY.SigExp()
Outlook_EUR1 = OutEUR.SigExp()
Outlook_Swit1 = OutCHF.SigExp()
Outlook_AUS1 = OutAUD.SigExp()
Outlook_EM1 = OutEM.SigExp()
CommData = RelStr.Trading_signal_main()
CommData_Weight = RelStr.USBeta()
Outlook_Cycle_P = OutEquity.UpDown()
Outlook_Cycle = WeightAdj(Outlook_Cycle_P)

Outlook_Cycle = Outlook_Cycle['2007-01-31':]

Outlook_2optPP = OutlookPortAdj(Outlook_2opt, Outlook_Cycle, maxequityweight)
Outlook_2optP = minposition(Outlook_2optPP, minequityweight)


# index_timeseries2 = timeseries.ix[timeseries.index.get_loc('2006-12-29'):]

OutPre = Outlook1.ix[Outlook1.index.get_loc('2007-01-31'):]
Outlook_USA2 = Outlook_USA1.ix[Outlook_USA1.index.get_loc('2007-01-31'):]
Outlook_JPY2 = Outlook_JPY1.ix[Outlook_JPY1.index.get_loc('2007-01-31'):]
Outlook_EUR2 = Outlook_EUR1.ix[Outlook_EUR1.index.get_loc('2007-01-31'):]
Outlook_Swit2 = Outlook_Swit1.ix[Outlook_Swit1.index.get_loc('2007-01-31'):]
Outlook_AUS2 = Outlook_AUS1.ix[Outlook_AUS1.index.get_loc('2007-01-31'):]
Outlook_EM2 = Outlook_EM1.ix[Outlook_EM1.index.get_loc('2007-01-31'):]
CommData2 = CommData.ix[CommData.index.get_loc('2007-01-31'):]
CommData_Weight2 = CommData_Weight.ix[CommData_Weight.index.get_loc('2007-01-31'):]
Outlook_Cycle2 = Outlook_Cycle_P.ix[Outlook_Cycle_P.index.get_loc('2007-01-31'):]

ETF_Price = pd.concat([timeseries, ETF_PriceB], axis=1, join_axes=[timeseries.index])
UI_Price = pd.concat([timeseries, UI_PriceB], axis=1, join_axes=[timeseries.index])
FedRateF = pd.concat([timeseries, FedRate], axis=1, join_axes=[timeseries.index])

del ETF_Price['PX_LAST']
del UI_Price['PX_LAST']
del FedRateF['PX_LAST']

ETF_performance = ETF_Price.pct_change(periods=1)
UI_performance = UI_Price.pct_change(periods=1)

Combo_performance1 = Merge_perform(ETF_performance, UI_performance)
Combo_performance_Pre = Combo_performance1[:-2].dropna()
Combo_performance = Mkt_Neut(Combo_performance_Pre, Signal_Bond, Signal_Equity, '2007-01-31')
Combo_index = Merge_Index(Combo_performance)
Combo_Rate = Merge_FedRate(FedRateF)   ###

Outlook2 = Outlook_2optP.ix[Outlook_2optP.index.get_loc('2007-01-31'):]

Moving_Avrg = MA(Combo_index, 121)
Momentum = Combo_index.pct_change(periods=60)
STDEV = STDEVF(Combo_performance, 60)
Rank1 = RANK(Momentum)
Rank2 = STDEV.rank(1, ascending=False)
Signal_summary = Signal_Summary(Rank1, Rank2, 0.2535, 52)
Selection = SelectionA(Signal_summary, 0.6559) #######

Equity = Selection.iloc[:,:28]
Bond = Selection.iloc[:,30:46]
Equity_rank = Unirank(Equity)
Bond_rank = Unirank(Bond)
Commodity = Unirank(Selection)
Commodity_rank = Commodity.iloc[:,46:54]
Universe_rank = pd.concat([Equity_rank, Bond_rank, Commodity_rank], axis=1, join_axes=[Equity_rank.index])
PreWeight_P = PreWeightA(Universe_rank,0.03,0.025,0.02,0.015,0.01,0.005) #######
PreWeight = Duration(PreWeight_P, Combo_Rate, Outlook2, '2007-01-31') ######
# PreWeight = Highyield(PreWeight_PP, Combo_Rate, Outlook2, '2006-12-29')  ######

Date = PreWeight.index.month
Rebal = pd.DataFrame(Date, index=PreWeight.index, columns=['RebalSig'])
Rebalancing = RebalSignal(Rebal)
# Rebalancing = RebalSignal_Risk(Rebalancing_P, Outlook_Cycle, '2007-01-31')

Date2 = index_timeseries2.index.month
Rebal2 = pd.DataFrame(Date2, index=index_timeseries2.index, columns=['RebalSig'])
Rebalancing2 = RebalSignal(Rebal2)
# Rebalancing2 = RebalSignal_Risk(Rebalancing2_P, Outlook_Cycle, '2007-01-31')

Outlook = pd.concat([Rebalancing, Outlook2], axis=1, join_axes=[Rebalancing.index])
del Outlook['RebalSig']

Outlook_USA = pd.concat([Rebalancing, Outlook_USA2], axis=1, join_axes=[Rebalancing.index])
del Outlook_USA['RebalSig']
SPY = Outlook_USA * 0.20 * 0.5
QQQ = Outlook_USA * 0.15 * 0.5

Outlook_JPY = pd.concat([Rebalancing, Outlook_JPY2], axis=1, join_axes=[Rebalancing.index])
del Outlook_JPY['RebalSig']
DXJ = Outlook_JPY * 0.04

Outlook_EUR = pd.concat([Rebalancing, Outlook_EUR2], axis=1, join_axes=[Rebalancing.index])
del Outlook_EUR['RebalSig']
HEDJ = Outlook_EUR * 0.04

Outlook_AUS = pd.concat([Rebalancing, Outlook_AUS2], axis=1, join_axes=[Rebalancing.index])
del Outlook_AUS['RebalSig']
EWA = Outlook_AUS * 0.05

Outlook_Swit = pd.concat([Rebalancing, Outlook_Swit2], axis=1, join_axes=[Rebalancing.index])
del Outlook_Swit['RebalSig']
EWL = Outlook_Swit * 0.02

Outlook_EM = pd.concat([Rebalancing, Outlook_EM2], axis=1, join_axes=[Rebalancing.index])
del Outlook_EM['RebalSig']
EEM = Outlook_EM * 0.035  #### 0.1 or 0.07
FXI = Outlook_EM * 0.03  #### 0.06 or 0.04
INDA = Outlook_EM * 0.03  #### 0.06 or 0.04
EMB = Outlook_EM * 0.06

A = PreWeight.columns.get_loc("SPY US equity")
del PreWeight['SPY US equity']
PreWeight.insert(A,'SPY US equity', SPY['A'])

AA = PreWeight.columns.get_loc("QQQ US equity")
del PreWeight['QQQ US equity']
PreWeight.insert(AA,'QQQ US equity', QQQ['A'])

B = PreWeight.columns.get_loc("DXJ US equity")
del PreWeight['DXJ US equity']
PreWeight.insert(B,'DXJ US equity', DXJ['A'])

C = PreWeight.columns.get_loc("HEDJ US equity")
del PreWeight['HEDJ US equity']
PreWeight.insert(C,'HEDJ US equity', HEDJ['A'])

D = PreWeight.columns.get_loc("EWA US equity")
del PreWeight['EWA US equity']
PreWeight.insert(D,'EWA US equity', EWA['A'])

E = PreWeight.columns.get_loc("EWL US equity")
del PreWeight['EWL US equity']
PreWeight.insert(E,'EWL US equity', EWL['A'])

F = PreWeight.columns.get_loc("FXI US equity")
del PreWeight['FXI US equity']
PreWeight.insert(F,'FXI US equity', FXI['A'])

G = PreWeight.columns.get_loc("INDA US equity")
del PreWeight['INDA US equity']
PreWeight.insert(G,'INDA US equity', INDA['A'])

H = PreWeight.columns.get_loc("EEM US equity")
del PreWeight['EEM US equity']
PreWeight.insert(H,'EEM US equity', EEM['A'])

J = PreWeight.columns.get_loc("EMB US equity")
del PreWeight['EMB US equity']
PreWeight.insert(J,'EMB US equity', EMB['A'])

PreWeight_sort = CurrencyVol_sortout(PreWeight, '2007-01-31')   ######

Equity1 = PreWeight_sort.iloc[:,:28]
Equity1_P = Volconst(Equity1, '2007-01-31')
AggGov1 = PreWeight_sort.iloc[:,28:36]
Credit1 = PreWeight_sort.iloc[:,36:43]
EM1 = PreWeight_sort.iloc[:,43:44]
Comm1 = PreWeight_sort.iloc[:,44:50]
Comm2 = PreWeight_sort.iloc[:,50:52]

Equity2 = Equity1.sum(axis=1)
AggGov2 = AggGov1.sum(axis=1)
Credit2 = Credit1.sum(axis=1)

EquitySum = pd.DataFrame(Equity2, index=Equity2.index, columns=['A'])
AggGovSum = pd.DataFrame(AggGov2, index=AggGov2.index, columns=['A'])
CreditSum = pd.DataFrame(Credit2, index=Credit2.index, columns=['A'])

CommOutlook1 = pd.concat([Rebalancing, CommData2], axis=1, join_axes=[Rebalancing.index])
del CommOutlook1['RebalSig']
CommOutlook_P = CommOutlook1 * Const_Comm
CommOutlook = RiskOnOff(CommOutlook_P, Outlook_Cycle, '2007-01-31')
CommWeight1 = pd.concat([Rebalancing, CommData_Weight2], axis=1, join_axes=[Rebalancing.index])

CommOutlook_B = CommOutlook1 * 0
CommOutlook_Const_B = CommOutlook1 * 0
#
del CommWeight1['RebalSig']
CommSum1 = CommWeight1.sum(axis=1)
CommSum = pd.DataFrame(CommSum1, index=CommSum1.index, columns=['A'])
#
CommWeight_P = BondFinal(CommWeight1, CommSum, Const_Comm)
CommWeight = RiskOnOff(CommWeight_P, Outlook_Cycle, '2007-01-31')
CommOutlook_FF = pd.DataFrame(CommWeight.sum(axis=1), index=CommWeight.index , columns=['A'])
#
CreditOutlook = CreditAdj(Outlook, Const_Cash, '2007-01-31')
AggGovOutlook = AggGovAdj(Outlook, CommOutlook_B, EM1, Const_Cash, '2007-01-31')

AggGov_PreWeight = EquityAdj2(AggGov1, AggGovSum, AggGovOutlook, '2007-01-31')
Credit_PreWeight = EquityAdj2(Credit1, CreditSum, CreditOutlook, '2007-01-31')
EM_PreWeight = EM1.ix[EM1.index.get_loc('2007-01-31'):]

BondWeight_Pre = pd.concat([AggGov_PreWeight, Credit_PreWeight, EM_PreWeight], axis=1, join_axes=[AggGov_PreWeight.index])

EquityWeight_Pre = EquityOnly(Equity1_P, Outlook2, EquitySum, '2007-01-31')
ESum_pre = EquityWeight_Pre.sum(axis=1)
Esum = pd.DataFrame(ESum_pre, index=ESum_pre.index, columns=['sum'])

DMSum = DM(EquityWeight_Pre)
EMSum = EM(Esum, DMSum)

EquityWeight = Bullsoft_ind(EquityWeight_Pre, Outlook_Cycle2, Esum, 0, DMSum, EMSum, 0.1,'2007-01-31', 'sum')

BondOutlook = BondOut(CommOutlook_FF, Esum)
EquityWeight_TB1 = EquityWeight.sum(axis=1)
CommWeight_TB1 = CommWeight.sum(axis=1)

EquityWeight_TB = pd.DataFrame(EquityWeight_TB1, index=EquityWeight_TB1.index, columns=['A'])
CommWeight_TB = pd.DataFrame(CommWeight_TB1, index=EquityWeight_TB1.index, columns=['A'])

BondWeight_TB2 = BondWeight_Pre.sum(axis=1)
BondWeight_TB = pd.DataFrame(BondWeight_TB2, index=BondWeight_TB2.index, columns=['A'])
BondWeight = EquityAdj2(BondWeight_Pre, BondWeight_TB, BondOutlook, '2007-01-31')
BondWeight_TB3 = BondWeight.sum(axis=1) #######
BondWeight_TB4 = pd.DataFrame(BondWeight_TB3, index=BondWeight_TB3.index, columns=['A'])

FinalWeight = pd.concat([EquityWeight, BondWeight, CommWeight], axis=1, join_axes=[EquityWeight.index])

Portfolio_thr = WeightAdj(FinalWeight)
Portfolio = pd.concat([Portfolio_thr, index_timeseries2], axis=1, join_axes=[index_timeseries2.index])
del Portfolio['PX_LAST']

Portfolio_F = Portfolio.ix[Portfolio.index.get_loc('2007-01-31'):]
Portfolio_F_Export_P = PortExport(Portfolio_F, Rebalancing, '2007-01-31')
Portfolio_F_Export = Mkt_Neut(Portfolio_F_Export_P, Signal_Bond, Signal_Equity, '2007-01-31')

Cash_Pre = pd.DataFrame(1 - Portfolio_F_Export.sum(axis=1), index=Portfolio_F_Export.index, columns=['A'])
Cash_Final = CashAdj_Add(Cash_Pre,  Rebalancing, '2007-01-31')

Rebalancing_Signal = Rebalancing2.ix[Rebalancing2.index.get_loc('2007-01-31'):] # REBAL SI
Combo_perTrim = Combo_performance.ix[Combo_performance.index.get_loc('2007-01-31'):]

PortPerformpre_P = NAV(Portfolio_F_Export, Combo_perTrim, Rebalancing_Signal)
PortPerformpre = Mkt_Neut(PortPerformpre_P, Signal_Bond_Exp, Signal_Equity_Exp, '2007-01-31')
PortPerformpre_PP = pd.concat([PortPerformpre, Cash_Final], axis=1, join_axes=[PortPerformpre.index])
PortPerformpre2 = PortPerformpre_PP.sum(axis=1)

PortPerformpre3 = pd.DataFrame(PortPerformpre2, index=PortPerformpre2.index, columns=['A'])
PortPerformance = PortPerform(PortPerformpre3, Rebalancing_Signal, '2007-01-31')

expWeight1 = TRexpWeight(Portfolio_F_Export, Rebalancing_Signal)
expWeight2 = TRexpWeight2(expWeight1)
T = expWeight2.abs()
TradingExpPre = 1 - T.sum(axis=1) * Trading_Expenses
TradingExpPre2 = pd.DataFrame(TradingExpPre, index=TradingExpPre.index, columns=['A'])
NAV_Series = PortNAV(PortPerformance, TradingExpPre2)
NAV_Series.rename(columns={'A': 'US_Alpha'}, inplace=True)

stdA = NAV_Series.pct_change(periods=1)
std = stdA.std() * (252 ** 0.5)
Annualized_return = ((NAV_Series.iat[len(NAV_Series.index) - 1, 0] / 1000) ** (1 / (len(NAV_Series.index) - 1))) ** 252 - 1
sharpe_ratio = Annualized_return / std

#FinalPort = pd.DataFrame(Portfolio_F_Export.iloc[Portfolio_F_Export.index.get_loc(WeightDate)])
#jj = Rebalancing.index.get_loc(WeightDate)
#OrderRebal = pd.DataFrame(Rebalancing.iloc[jj])
year = date.today().year
month = date.today().month
day = date.today().day
Timestamp1 = date(year, month, day)
Timestamp2 = Timestamp1.strftime("%Y_%m_%d")
exp_beta = 'D:/ALPHA22_1112.xlsx'
#OrderSheet(FinalPort, OrderRebal, exp_beta)

writer = pd.ExcelWriter('D:/ALPHA22_1114.xlsx')
NAV_Series.to_excel(writer, 'NAV')
Portfolio_F_Export.to_excel(writer, 'Weight')
writer.save()
